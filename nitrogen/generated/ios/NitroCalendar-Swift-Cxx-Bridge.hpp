///
/// NitroCalendar-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `HybridNitroCalendarSpec` to properly resolve imports.
namespace margelo::nitro::nitrocalendar { class HybridNitroCalendarSpec; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridNitroCalendarSpec_cxx` to properly resolve imports.
namespace NitroCalendar { class HybridNitroCalendarSpec_cxx; }

// Include C++ defined types
#include "HybridNitroCalendarSpec.hpp"
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::nitrocalendar::bridge::swift {

  // pragma MARK: std::function<void()>
  /**
   * Specialized version of `std::function<void()>`.
   */
  using Func_void = std::function<void()>;
  /**
   * Wrapper class for a `std::function<void()>`, this can be used from Swift.
   */
  class Func_void_Wrapper final {
  public:
    explicit Func_void_Wrapper(std::function<void()>&& func): _function(std::make_shared<std::function<void()>>(std::move(func))) {}
    inline void call() const {
      _function->operator()();
    }
  private:
    std::shared_ptr<std::function<void()>> _function;
  };
  Func_void create_Func_void(void* _Nonnull swiftClosureWrapper);
  inline Func_void_Wrapper wrap_Func_void(Func_void value) {
    return Func_void_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::nitrocalendar::HybridNitroCalendarSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::nitrocalendar::HybridNitroCalendarSpec>`.
   */
  using std__shared_ptr_margelo__nitro__nitrocalendar__HybridNitroCalendarSpec_ = std::shared_ptr<margelo::nitro::nitrocalendar::HybridNitroCalendarSpec>;
  std::shared_ptr<margelo::nitro::nitrocalendar::HybridNitroCalendarSpec> create_std__shared_ptr_margelo__nitro__nitrocalendar__HybridNitroCalendarSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__nitrocalendar__HybridNitroCalendarSpec_(std__shared_ptr_margelo__nitro__nitrocalendar__HybridNitroCalendarSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::nitrocalendar::HybridNitroCalendarSpec>
  using std__weak_ptr_margelo__nitro__nitrocalendar__HybridNitroCalendarSpec_ = std::weak_ptr<margelo::nitro::nitrocalendar::HybridNitroCalendarSpec>;
  inline std__weak_ptr_margelo__nitro__nitrocalendar__HybridNitroCalendarSpec_ weakify_std__shared_ptr_margelo__nitro__nitrocalendar__HybridNitroCalendarSpec_(const std::shared_ptr<margelo::nitro::nitrocalendar::HybridNitroCalendarSpec>& strong) { return strong; }
  
  // pragma MARK: Result<void>
  using Result_void_ = Result<void>;
  inline Result_void_ create_Result_void_() {
    return Result<void>::withValue();
  }
  inline Result_void_ create_Result_void_(const std::exception_ptr& error) {
    return Result<void>::withError(error);
  }

} // namespace margelo::nitro::nitrocalendar::bridge::swift
