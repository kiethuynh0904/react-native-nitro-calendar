///
/// HybridNitroCalendarSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNitroCalendarSpec.hpp"

// Forward declaration of `HybridNitroCalendarSpec_cxx` to properly resolve imports.
namespace NitroCalendar { class HybridNitroCalendarSpec_cxx; }

// Forward declaration of `ColorScheme` to properly resolve imports.
namespace margelo::nitro::nitrocalendar { enum class ColorScheme; }

#include "ColorScheme.hpp"
#include <functional>

#include "NitroCalendar-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitrocalendar {

  /**
   * The C++ part of HybridNitroCalendarSpec_cxx.swift.
   *
   * HybridNitroCalendarSpecSwift (C++) accesses HybridNitroCalendarSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNitroCalendarSpec_cxx can directly inherit from the C++ class HybridNitroCalendarSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNitroCalendarSpecSwift: public virtual HybridNitroCalendarSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNitroCalendarSpecSwift(const NitroCalendar::HybridNitroCalendarSpec_cxx& swiftPart):
      HybridObject(HybridNitroCalendarSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroCalendar::HybridNitroCalendarSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    inline bool getIsBlue() noexcept override {
      return _swiftPart.isBlue();
    }
    inline void setIsBlue(bool isBlue) noexcept override {
      _swiftPart.setIsBlue(std::forward<decltype(isBlue)>(isBlue));
    }
    inline bool getHasBeenCalled() noexcept override {
        return _swiftPart.hasBeenCalled();
    }
    inline void setHasBeenCalled(bool hasBeenCalled) noexcept override {
      _swiftPart.setHasBeenCalled(std::forward<decltype(hasBeenCalled)>(hasBeenCalled));
    }
    inline ColorScheme getColorScheme() noexcept override {
      auto __result = _swiftPart.getColorScheme();
      return static_cast<ColorScheme>(__result);
    }
    inline void setColorScheme(ColorScheme colorScheme) noexcept override {
      _swiftPart.setColorScheme(static_cast<int>(colorScheme));
    }
    inline std::function<void()> getSomeCallback() noexcept override {
      auto __result = _swiftPart.getSomeCallback();
      return __result;
    }
    inline void setSomeCallback(const std::function<void()>& someCallback) noexcept override {
      _swiftPart.setSomeCallback(someCallback);
    }

  public:
    // Methods
    inline void someMethod() override {
      auto __result = _swiftPart.someMethod();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }

  private:
    NitroCalendar::HybridNitroCalendarSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitrocalendar
