///
/// HybridMediaViewerSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridMediaViewerSpec``
public protocol HybridMediaViewerSpec_protocol: HybridObject, HybridView {
  // Properties
  var isBlue: Bool { get set }
  var hasBeenCalled: Bool { get set }
  var colorScheme: ColorScheme { get set }
  var someCallback: () -> Void { get set }

  // Methods
  func someMethod() throws -> Void
}

/// See ``HybridMediaViewerSpec``
public class HybridMediaViewerSpec_base {
  private weak var cxxWrapper: HybridMediaViewerSpec_cxx? = nil
  public func getCxxWrapper() -> HybridMediaViewerSpec_cxx {
  #if DEBUG
    guard self is HybridMediaViewerSpec else {
      fatalError("`self` is not a `HybridMediaViewerSpec`! Did you accidentally inherit from `HybridMediaViewerSpec_base` instead of `HybridMediaViewerSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridMediaViewerSpec_cxx(self as! HybridMediaViewerSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the MediaViewer HybridObject.
 * Implement this protocol to create Swift-based instances of MediaViewer.
 * ```swift
 * class HybridMediaViewer : HybridMediaViewerSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridMediaViewerSpec = HybridMediaViewerSpec_protocol & HybridMediaViewerSpec_base
